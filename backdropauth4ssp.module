<?php
/**
 * @file
 * BackdropAuth For simpleSAMLphp module.
 *
 * This module tightly integrates the SimpleSAMLphp Identity Provider login experience with a Backdrop site.
 */

/**
 * Implements hook_config_info().
 */
function backdropauth4ssp_config_info() {
  $prefixes['backdropauth4ssp.settings'] = array(
    'label' => t('BackdropAuth for SimpleSAMLphp settings'),
    'group' => t('BackdropAuth'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function backdropauth4ssp_menu() {
  $items = array();

  $items['admin/config/people/backdropauth4ssp'] = array(
    'title' => 'BackdropAuth for SimpleSAMLphp Settings',
    'description' => 'Control the various settings of the backdropauth4ssp module',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backdropauth4ssp_settings'),
    'access arguments' => array('administer backdropauth4ssp'),
    'file' => 'backdropauth4ssp.admin.inc',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function backdropauth4ssp_permission() {
  return array(
    'administer backdropauth4ssp' => array(
      'title' => t('Administer BackdropAuth4ssp'),
      'description' => t('Administer settings for BackdropAuth for SimpleSAMLphp.'),
      'restrict access' => TRUE,
      'warning' => 'Can change important settings for the IdP settings for SimpleSAMLphp',
    ),
  );
}

/**
 * Implements hook_user_login().
 */
function backdropauth4ssp_user_login(&$edit, $account) {
  _backdropauth4ssp_exec($account);
}

/**
 * Implements hook_user_logout().
 */
function backdropauth4ssp_user_logout($account) {
  // Get the configuration information from SimpleSAMLphp.
  $ssp_config = _backdropauth4ssp_get_simplesamlphp_configuration();

  // If we don't have configuration, exit without doing anything.
  if (!is_array($ssp_config)) {
    // The least we can do is write something to the watchdog so someone will know what's happening.
    watchdog('backdropauth4ssp', 'Could not use backdropauth for %name, could not get the SimpleSAMLphp configuration.', array('%name' => $account->name));
    return;
  }

  // Delete the cookie.
  setcookie($ssp_config['cookie_name'], sha1($ssp_config['secretsalt'] . $account->uid) . ':' . $account->uid, time() - 3600, $ssp_config['baseurlpath']);

  // Invalidate SimpleSAML session by expiring it.
  $session = \SimpleSAML\Session::getSessionFromRequest();
  // Backward compatibility with SimpleSAMP older than 1.14.
  // SimpleSAML_Session::getAuthority() has been removed in 1.14.
  // @see https://simplesamlphp.org/docs/development/simplesamlphp-upgrade-notes-1.14
  if (method_exists($session, 'getAuthority')) {
    $session->setAuthorityExpire($session->getAuthority(), 1);
  }
  else {
    foreach ($session->getAuthorities() as $authority) {
      $session->setAuthorityExpire($authority, 1);
    }
  }

  // If the ReturnTo URL is present, send the user to the URL.
  if (isset($_GET['ReturnTo']) && $_GET['ReturnTo']) {
    $destination = &backdrop_static(__FUNCTION__);
    $destination = $_GET['ReturnTo'];

    // Check the ReturnTo if it's in the allowed list.
    if (!backdropauth4ssp_valid_returnto_parameter()) {
      $destination = FALSE;
    }
  }
}

/**
 * Implements hook_backdrop_goto_alter().
 */
function backdropauth4ssp_backdrop_goto_alter(&$path, &$options, &$http_response_code) {
  $destination = &backdrop_static('backdropauth4ssp_user_logout');
  if (!$path && $destination) {
    backdrop_goto($destination);
  }
}


/**
 * Implements hook_user_view().
 */
function backdropauth4ssp_user_view($account) {
  global $user;
  if ($user->uid == $account->uid) {
    _backdropauth4ssp_exec($account);
  }
}

/**
 * Returns the SimpleSAMLphp configuration.
 */
function _backdropauth4ssp_get_simplesamlphp_configuration() {
  $config = NULL;

  if (!backdropauth4ssp_include_simplesamlphp_library()) {
    return;
  }

  $ssp_config = \SimpleSAML\Configuration::getInstance();

  if (!is_object($ssp_config)) {
    return;
  }

  // Get the secretsalt.
  $config['secretsalt'] = $ssp_config->getValue('secretsalt');

  // Get the baseurlpath.
  $config['baseurlpath'] = '/' . $ssp_config->getBaseURL();

  unset($ssp_config);

  $ssp_authsources = \SimpleSAML\Configuration::getConfig('authsources.php');
  $authsource = $ssp_authsources->getValue(backdropauth4ssp_get_simplesamlphp_authsource());

  // get cookie_name from specified authsource
  $config['cookie_name'] = !empty($authsource['cookie_name']) ? $authsource['cookie_name'] : 'backdropauth4ssp';

  if (!empty($authsource['cookie_domain'])) {
    $config['cookie_domain'] = $authsource['cookie_domain'];
  }

  unset($ssp_authsources);

  // Make sure every configuration setting is present.
  foreach ($config as $val) {

    if (!strlen($val)) {
      return;
    }

  }

  return $config;

}

/**
 * Sets a special cookie for backdropauth4ssp.
 */
function _backdropauth4ssp_exec($account) {

  // Get the configuration information from SimpleSAMLphp.
  $ssp_config = _backdropauth4ssp_get_simplesamlphp_configuration();

  // If we don't have configuration, exit without doing anything.
  if (!is_array($ssp_config)) {
    // The least we can do is write something to the watchdog so someone will know what's happening.
    watchdog('backdropauth4ssp', 'Could not use backdropauth for %name, could not get the SimpleSAMLphp configuration.', array('%name' => $account->name));
    return;
  }

  // Store the authenticated user's uid in the cookie (create a validation hash to ensure nobody tampers with the uid).
  $domain = !empty($ssp_config['cookie_domain']) ? $ssp_config['cookie_domain'] : FALSE;
  setcookie($ssp_config['cookie_name'], sha1($ssp_config['secretsalt'] . $account->uid) . ':' . $account->uid, 0, $ssp_config['baseurlpath'], $domain);

  // If the ReturnTo URL is present, send the user to the URL.
  if (isset($_GET['ReturnTo']) && $_GET['ReturnTo']) {

    // Check the ReturnTo if it's in the allowed list.
    if (!backdropauth4ssp_valid_returnto_parameter()) {
      return;
    }
    header('Location: ' . $_GET['ReturnTo']);
    die;
  }

}

/**
 * Include simpleSAMLphp library.
 *
 * @return bool
 *   Display whether library has been included or not.
 */
function backdropauth4ssp_include_simplesamlphp_library() {
  // Get the simplesamlphp session.
  $basedir = backdropauth4ssp_get_simplesamlphp_library_dir();
  $autoload_file = $basedir . '/lib/_autoload.php';

  // If variable is not defined or dir is not exist.
  if (!strlen($basedir) || !file_exists($basedir) || !file_exists($autoload_file)) {
    return FALSE;
  }
  require_once $basedir . '/lib/_autoload.php';

  return TRUE;
}

/**
 * Returns "installdir" variable.
 */
function backdropauth4ssp_get_simplesamlphp_library_dir() {
  return config_get('backdropauth4ssp.settings', 'backdropauth4ssp_installdir');
}

/**
 * Returns "backdropauth4ssp_authsource" variable.
 */
function backdropauth4ssp_get_simplesamlphp_authsource() {
  return config_get('backdropauth4ssp.settings', 'backdropauth4ssp_authsource');
}

/**
 * Check the ReturnTo query parameter if it's in the allowed list.
 *
 * @return bool
 *   True if ReturnTo parameter is in the allowed list, False otherwise.
 */
function backdropauth4ssp_valid_returnto_parameter() {
  return backdrop_match_path($_GET['ReturnTo'], config_get('backdropauth4ssp.settings', 'backdropauth4ssp_returnto_list'));
}
